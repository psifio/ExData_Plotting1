find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
x<-list(foo=1:4,bar=0.6)
x[1]
x[[1]]
class(x[1])
class(x[[1]])
x<-c(1,NA,2,NA,3)
y<-c("a",NA,"b","c","d")
good<-completecases(x,y)
good<-complete.cases(x,y)
good
x[good]
y[good]
x<-c(1,2,NA,4,NA,5)
good<-!is.na(x)
good
x<-c(1,2,NA,4,9,5)
good
good<-is.na(x)
good
x<-c(1,2,NA,4,NA,6)
good<-!is.na(x)
good
x<-c(1,NA)
good<-!is.na(x)
good
x<-c(1,2)
good
str(file)
str(na)
airquality
airquality[1,]
airquality[1:2,]
q()
add2<-function(x,y){
x+y
}
add2(3,5)
above<-function(x,n){
use<-x>n
x[use]
}
x<-1:20
aboxe(x,5)
above(x,5)
above(x)
above<-function(x,n=10){
use<-x>n
x[use]
}
above(x)
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmean(airquality)
columnmean<-function(y,removeNA=TRUE){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i], na.rm=removeNA)
}
means
}
columnmean(airquality)
above10<-funtion(x){
use<-X>10
x[use]
}
above10<-funtion(x){
use<-X>10
x[use]
}
above<-function(x,n=10){
use<-x>n
x[use]
}
above<-function(x,n=10){
use<-x>n
x[use]
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
#this variable will hold the inverse of the matrix
inv <- NULL
#set the value of the matrix and clear the value of the matrix's inverse
set <- function(y) {
x <<- y
inv <<- NULL
}
#get the matrix
get <- function() x
#set the value of the matrix's inverse to what is passed
setinverse <- function(inverse) inv <<- inverse
#get the value of the matrix's inverse
getinverse <- function() inv
#construct the list of the functions
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
k<-matrix()
cacheSolve <- function(x, ...) {
#get the value of the inverse of the matrix
inv <- x$getinverse()
#if it is not null return the computed value from the cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
#otherwise get the matrix and compute its inverse
mymatrix <- x$get()
inv <- solve(mymatrix, ...)
#cache the inverse
x$setinverse(inv)
#return the inverse
inv
}
x<-list(a=1:5, b=rnorm(10))
x
lapply(x,mean)
x
str(apply)
str(gl)
log(-1)
mean(z)
mean(aa)
traceback
mean(aa)
traceback()
traceback
traceback()
z<-7
mean(aa)
z<-4
traceback()
debug(lm)
lm(y~x)
exit
break
recover
return
help
library(datasets)
data(iris)
iris
head(iris)
?iris
x<-iris
x$Sepal.length
x$Sepal.Length
x<-[x,Species=="virginica"]
x<-[x,x$Species=="virginica"]
x<-x,x$Species=="virginica"
head(iris)
sapply(iris,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(iris,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
sapply(iris,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(x,function(x) colMeans(x[,c("Sepal.Length")]))
sapply(iris,function(x) colMeans(x[,c("Sepal.Length")]))
splitted<-split(iris,iris$Sepal.Length)
splitted
splitted<-split(iris,iris$Species)
head(splitted)
splitted
splitted<-split(iris,iris$Species)
sapply(splitted,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length")]))
splitted<-split(iris,iris$Species)
lapply(splitted, function(x) colMeans(x[,c("Sepal.Length")]))
airquality
s<-split(airquality,airquality$Month)
lapply<-s, function(x) colMeans(x)
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[,c("Ozone")]))
library(datasets)
head(airquality)
s<-split(airquality,airquality$Month)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R")]))
lapply(s, function(x) colMeans(x[,c("Ozone")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.width")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
splitted<-split(iris,iris$Species)
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.width")]))
lapply(splitted,function(x) colMeans(x[,c("Sepal.Length","Sepal.Width")]))
head(iris)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species,mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
m<-tapply(mtcars$hp, mtcars$cyl, mean)
m
m[4]
m$4
m[1]
m[3]-m[1]
?qnorm
?pnorm
set.seed(1)
rpois(5, 2)
library(httr)
library(httpuv)
?par
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
type = "n"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",
pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
head(model)
class(model)
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
setwd("C:/makisXPS/Rwork/ExData_Plotting1")
#source data file
fileUrl<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
#data file will be downloaded with this name
localfilename<-"./PowerConsumption.zip"
#download file
#mode="wb" needed to make sure file is downloaded as binary
zippedFile<-download.file(fileUrl,destfile=localfilename,mode="wb")
#unzip file
unzippedFile<-unzip(localfilename)
#subset and read data
mydata<-read.csv.sql(unzippedFile,header=TRUE,sep=";", sql="select * from file where Date='1/2/2007' or Date='2/2/2007'")
#plot the histogram
hist(mydata$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
library(sqldf)
#source data file
fileUrl<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
#data file will be downloaded with this name
localfilename<-"./PowerConsumption.zip"
#download file
#mode="wb" needed to make sure file is downloaded as binary
zippedFile<-download.file(fileUrl,destfile=localfilename,mode="wb")
#unzip file
unzippedFile<-unzip(localfilename)
#subset and read data
mydata<-read.csv.sql(unzippedFile,header=TRUE,sep=";", sql="select * from file where Date='1/2/2007' or Date='2/2/2007'")
#plot the histogram
hist(mydata$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
h<-hist(mydata$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
h.save
class(h)
?hist
dev.copy(png, file = "plot1.png")
dev.copy(png, file = "plot11.png")
